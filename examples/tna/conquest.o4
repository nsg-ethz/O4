#lang o4
#include <core.p4>
#include <tofino.p4>
#include <tofino1arch.p4>

typedef bit<48> mac_addr_t;
typedef bit<32> ipv4_addr_t;
typedef bit<16> ether_type_t;
const ether_type_t[2] ETHERTYPES = [16w0x800, 16w0x810];
typedef bit<8> ip_protocol_t;
const ip_protocol_t[3] IP_PROTOCOLS = [1, 6, 17];
header ethernet_h {
    mac_addr_t dst_addr;
    mac_addr_t src_addr;
    bit<16>    ether_type;
}

header ipv4_h {
    bit<4>      version;
    bit<4>      ihl;
    bit<6>      diffserv;
    bit<2>      ecn;
    bit<16>     total_len;
    bit<16>     identification;
    bit<3>      flags;
    bit<13>     frag_offset;
    bit<8>      ttl;
    bit<8>      protocol;
    bit<16>     hdr_checksum;
    ipv4_addr_t src_addr;
    ipv4_addr_t dst_addr;
}

header tcp_h {
    bit<16> src_port;
    bit<16> dst_port;
    bit<32> seq_no;
    bit<32> ack_no;
    bit<4>  data_offset;
    bit<4>  res;
    bit<8>  flags;
    bit<16> window;
    bit<16> checksum;
    bit<16> urgent_ptr;
}

header udp_h {
    bit<16> src_port;
    bit<16> dst_port;
    bit<16> hdr_lenght;
    bit<16> checksum;
}

struct header_t {
    ethernet_h ethernet;
    ipv4_h     ipv4;
    tcp_h      tcp;
    udp_h      udp;
}

struct ig_metadata_t {
}

struct eg_metadata_t {
    bit<8>        num_snapshots_to_read;
    bit<2>        snap_epoch;
    bit<18>       q_delay;
    bit<8>        random_bits;
    bit<11>       cyclic_index;
    bit<11>[2]    hashed_index;
    bit<11>[4][2] index;
    bit<32>[4][2] read;
    bit<32>[4]    read_min_l0;
    bit<32>[2]    read_min_l1;
    bit<32>       read_min_l2;
}

parser TofinoIngressParser(packet_in pkt, inout ig_metadata_t ig_md, out ingress_intrinsic_metadata_t ig_intr_md) {
    state start {
        pkt.extract(ig_intr_md);
    }
    state parse_resubmit {
        pkt.advance(64);
    }
    state parse_port_metadata {
        pkt.advance(64);
    }
    start >(ig_intr_md.resubmit_flag)> { 1: parse_resubmit; 0: parse_port_metadata; } >> accept;
}

parser EtherIPTCPUDPParser(packet_in pkt, out header_t hdr) {
    state start {
    }
    state parse_ethernet {
        pkt.extract(hdr.ethernet);
    }
    state parse_ipv4 {
        pkt.extract(hdr.ipv4);
    }
    state parse_tcp {
        pkt.extract(hdr.tcp);
    }
    state parse_udp {
        pkt.extract(hdr.udp);
    }
    start >> parse_ethernet >(hdr.ethernet.ether_type)> { ETHERTYPES[0]: parse_ipv4; default: reject; }
    parse_ipv4 >(hdr.ipv4.protocol)> { IP_PROTOCOLS[1]: parse_tcp; IP_PROTOCOLS[2]: parse_udp; default: accept; }
    (parse_tcp, parse_udp) >> accept;
}

parser SwitchIngressParser(packet_in pkt, out header_t hdr, out ig_metadata_t ig_md, out ingress_intrinsic_metadata_t ig_intr_md) {
    TofinoIngressParser() tofino_parser;
    EtherIPTCPUDPParser() layer4_parser;
    state start {
        tofino_parser.apply(pkt, ig_md, ig_intr_md);
        layer4_parser.apply(pkt, hdr);
    }
    start >> accept;
}

deparser SwitchIngressDeparser(packet_out pkt, inout header_t hdr, in ig_metadata_t ig_md, in ingress_intrinsic_metadata_for_deparser_t ig_intr_dprsr_md) {
    apply {
        pkt.emit(hdr);
    }
}

parser SwitchEgressParser(packet_in pkt, out header_t hdr, out eg_metadata_t eg_md, out egress_intrinsic_metadata_t eg_intr_md) {
    EtherIPTCPUDPParser() layer4_parser;
    state start {
        pkt.extract(eg_intr_md);
        layer4_parser.apply(pkt, hdr);
    }
    start >> accept;
}

deparser SwitchEgressDeparser(packet_out pkt, inout header_t hdr, in eg_metadata_t eg_md, in egress_intrinsic_metadata_for_deparser_t eg_intr_md_for_dprsr) {
    apply {
        pkt.emit(hdr);
    }
}

control SwitchIngress(inout header_t hdr, inout ig_metadata_t ig_md, in ingress_intrinsic_metadata_t ig_intr_md, in ingress_intrinsic_metadata_from_parser_t ig_intr_prsr_md, inout ingress_intrinsic_metadata_for_deparser_t ig_intr_dprsr_md, inout ingress_intrinsic_metadata_for_tm_t ig_intr_tm_md) {
    action drop() {
        ig_intr_dprsr_md.drop_ctl = 0x1;
    }
    action drop_and_exit() {
        drop();
        exit;
    }
    action nop() {
    }
    action route_to_port(bit<9> port) {
        ig_intr_tm_md.ucast_egress_port = port;
    }
    action reflect() {
        ig_intr_tm_md.ucast_egress_port = ig_intr_md.ingress_port;
    }
    table tb_route_ipv4 {
        key = {
            hdr.ipv4.dst_addr: exact;
        }
        actions = {
            route_to_port;
            reflect;
            drop;
        }
        default_action = reflect();
    }
    apply {
        tb_route_ipv4.apply();
    }
}

control SwitchEgress(inout header_t hdr, inout eg_metadata_t eg_md, in egress_intrinsic_metadata_t eg_intr_md, in egress_intrinsic_metadata_from_parser_t eg_intr_md_from_prsr, inout egress_intrinsic_metadata_for_deparser_t ig_intr_dprs_md, inout egress_intrinsic_metadata_for_output_port_t eg_intr_oport_md) {
    action nop() {
    }
    action drop() {
        ig_intr_dprs_md.drop_ctl = 0x1;
    }
    action skip() {
        exit;
    }
    action mark_ECN() {
        hdr.ipv4.ecn = 0x3;
    }
    action run_conquest() {
        nop();
    }
    table tb_gatekeeper {
        key = {
            eg_intr_md.egress_port: exact;
        }
        actions = {
            skip;
            run_conquest;
        }
        size = 1;
        default_action = skip();
    }
    action prep_epochs() {
        bit<18> q_delay = eg_intr_md.deq_timedelta;
        eg_md.q_delay = q_delay;
        eg_md.num_snapshots_to_read = (bit<8>)(q_delay >> 14);
        bit<48> d_i = eg_intr_md_from_prsr.global_tstamp;
        eg_md.snap_epoch = d_i[14 + 2 - 1:14];
    }
    action prep_reads() {
        eg_md.read = [[0, 0], [0, 0], [0, 0], [0, 0]];
    }
    Random<bit<8>>() rng;
    action prep_random() {
        eg_md.random_bits = rng.get();
    }
    Hash<bit<11>>[2][3](HashAlgorithm_t.CRC32) hash;
    action calc_hashed_index_TCP() {
        eg_md.hashed_index[0] = hash[0][0].get({ 5w8, hdr.ipv4.src_addr, 5w12, hdr.ipv4.dst_addr, 4w10, hdr.tcp.src_port, 6w28, hdr.tcp.dst_port });
        eg_md.hashed_index[1] = hash[1][0].get({ 4w11, hdr.ipv4.src_addr, 6w22, hdr.ipv4.dst_addr, 3w0, hdr.tcp.src_port, 3w4, hdr.tcp.dst_port });
    }
    action calc_hashed_index_UDP() {
        eg_md.hashed_index[0] = hash[0][1].get({ 3w6, hdr.ipv4.src_addr, 5w20, hdr.ipv4.dst_addr, 3w6, hdr.udp.src_port, 3w6, hdr.udp.dst_port });
        eg_md.hashed_index[1] = hash[1][1].get({ 6w31, hdr.ipv4.src_addr, 3w2, hdr.ipv4.dst_addr, 6w24, hdr.udp.src_port, 3w4, hdr.udp.dst_port });
    }
    action calc_hashed_index_Other() {
        eg_md.hashed_index[0] = hash[0][2].get({ 6w3, hdr.ipv4.src_addr, 6w24, hdr.ipv4.dst_addr, 4w14, hdr.ipv4.protocol });
        eg_md.hashed_index[1] = hash[1][2].get({ 4w3, hdr.ipv4.src_addr, 6w31, hdr.ipv4.dst_addr, 5w14, hdr.ipv4.protocol });
    }
    factory select_index_f(int snap, bit<11> index0, bit<11> index1) {
        action select_index() {
            eg_md.index[snap][0] = index0;
            eg_md.index[snap][1] = index1;
        }
        return select_index;
    }
    factory tb_select_index_f(int snap) {
        table tb_select_index {
            key = {
                eg_md.snap_epoch: exact;
            }
            actions = {
                select_index_f(snap, eg_md.cyclic_index, eg_md.cyclic_index);
                select_index_f(snap, eg_md.hashed_index[0], eg_md.hashed_index[1]);
            }
            size = 2;
            default_action = select_index_f(snap, eg_md.cyclic_index, eg_md.cyclic_index);
            const entries = {
                            snap : select_index_f(snap, eg_md.hashed_index[0], eg_md.hashed_index[1]);
            }
        }
        return tb_select_index;
    }
    Register<bit<32>, bit<11>>(1) reg_cleaning_index;
    Register<bit<32>, bit<11>>[4][2](2048) con_reg;
    factory read_f(Register<bit<32>, bit<11>> reg) {
        RegisterAction<bit<32>, bit<11>, bit<32>>(reg) read = {
            void apply(inout bit<32> val, out bit<32> rv) {
                rv = val;
            }
        };
        return read;
    }
    factory regexec_read_f(int snap, int row) {
        action regexec_read() {
            eg_md.read[snap][row] = read_f(con_reg[snap][row]).execute(eg_md.index[snap][row]);
        }
        return regexec_read;
    }
    factory inc_f(Register<bit<32>, bit<11>> reg, bit<32> value) {
        RegisterAction<bit<32>, bit<11>, bit<32>>(reg) inc = {
            void apply(inout bit<32> val, out bit<32> rv) {
                val += value;
                rv = val;
            }
        };
        return inc;
    }
    action calc_cyclic_index() {
        eg_md.cyclic_index = (bit<11>)inc_f(reg_cleaning_index, 1).execute(0);
    }
    factory regexec_inc_f(int snap, int row) {
        action regexec_inc() {
            eg_md.read[snap][row] = inc_f(con_reg[snap][row], (bit<32>)hdr.ipv4.total_len).execute(eg_md.index[snap][row]);
        }
        return regexec_inc;
    }
    factory clr_f(Register<bit<32>, bit<11>> reg) {
        RegisterAction<bit<32>, bit<11>, bit<32>>(reg) clr = {
            void apply(inout bit<32> val, out bit<32> rv) {
                val = 0;
                rv = 0;
            }
        };
        return clr;
    }
    factory regexec_clr_f(int snap, int row) {
        action regexec_clr() {
            clr_f(con_reg[snap][row]).execute(eg_md.index[snap][row]);
        }
        return regexec_clr;
    }
    factory tb_rr_f(int snap, int row) {
        table tb_rr {
            key = {
                eg_md.snap_epoch           : exact;
                eg_md.num_snapshots_to_read: range;
            }
            actions = {
                regexec_read_f(snap, row);
                regexec_inc_f(snap, row);
                regexec_clr_f(snap, row);
                nop;
            }
            size = 17;
            default_action = nop();
            const entries = {
                            (0, 0 .. 255) : regexec_clr_f(snap, row);
                            (1, 0 .. 255) : regexec_inc_f(snap, row);
                            (2, 1 .. 255) : regexec_read_f(snap, row);
                            (3, 2 .. 255) : regexec_read_f(snap, row);
            }
        }
        return tb_rr;
    }
    action calc_sum_l0() {
        eg_md.read_min_l1[0] = eg_md.read_min_l0[0] + eg_md.read_min_l0[1];
        eg_md.read_min_l1[1] = eg_md.read_min_l0[2] + eg_md.read_min_l0[3];
    }
    action calc_sum_l1() {
        eg_md.read_min_l2 = eg_md.read_min_l1[0] + eg_md.read_min_l1[1];
    }
    table tb_per_flow_action {
        key = {
            eg_md.read_min_l2[26:10]: range;
            eg_md.q_delay           : range;
            eg_md.random_bits       : range;
            hdr.ipv4.ecn            : exact;
        }
        actions = {
            nop;
            drop;
            mark_ECN;
        }
        default_action = nop();
    }
    apply {
        tb_gatekeeper.apply();
        prep_epochs();
        prep_reads();
        prep_random();
        calc_cyclic_index();
        if (hdr.ipv4.protocol == IP_PROTOCOLS[1]) {
            calc_hashed_index_TCP();
        } else if (hdr.ipv4.protocol == IP_PROTOCOLS[2]) {
            calc_hashed_index_UDP();
        } else {
            calc_hashed_index_Other();
        }
        for (int snap in [0, 1, 2, 3]) {
            tb_select_index_f(snap).apply();
            for (int row in [0, 1]) {
                tb_rr_f(snap, row).apply();
            }
            eg_md.read_min_l0[snap] = min(eg_md.read[snap][0], eg_md.read[snap][1]);
        }
        calc_sum_l0();
        calc_sum_l1();
        tb_per_flow_action.apply();
    }
}

Pipeline(SwitchIngressParser(), SwitchIngress(), SwitchIngressDeparser(), SwitchEgressParser(), SwitchEgress(), SwitchEgressDeparser()) pipe;

Switch(pipe) main;
