#lang o4
#include <core.p4>
#include <tofino.p4>
#include <tofino1arch.p4>

typedef bit<48> mac_addr_t;
typedef bit<32> ipv4_addr_t;
typedef bit<16> ether_type_t;
const ether_type_t[2] ETHERTYPES = [16w0x800, 16w0x810];
typedef bit<8> ip_protocol_t;
const ip_protocol_t[3] IP_PROTOCOLS = [1, 6, 17];
header ethernet_h {
    mac_addr_t dst_addr;
    mac_addr_t src_addr;
    bit<16>    ether_type;
}

header ipv4_h {
    bit<4>      version;
    bit<4>      ihl;
    bit<8>      diffserv;
    bit<16>     total_len;
    bit<16>     identification;
    bit<3>      flags;
    bit<13>     frag_offset;
    bit<8>      ttl;
    bit<8>      protocol;
    bit<16>     hdr_checksum;
    ipv4_addr_t src_addr;
    ipv4_addr_t dst_addr;
}

header tcp_h {
    bit<16> src_port;
    bit<16> dst_port;
    bit<32> seq_no;
    bit<32> ack_no;
    bit<4>  data_offset;
    bit<4>  res;
    bit<8>  flags;
    bit<16> window;
    bit<16> checksum;
    bit<16> urgent_ptr;
}

header udp_h {
    bit<16> src_port;
    bit<16> dst_port;
    bit<16> udp_total_len;
    bit<16> checksum;
}

header aes_inout_h {
    bit<8>[4][4] s;
}

header aes_meta_h {
    bit<16> dest_port;
    bit<8>  curr_round;
    bit<8>  ff;
}

header copyright_h {
    bit<64> copy;
}

struct header_t {
    ethernet_h  ethernet;
    ipv4_h      ipv4;
    tcp_h       tcp;
    udp_h       udp;
    aes_inout_h aes;
    aes_meta_h  aes_meta;
    copyright_h copy;
}

header aes_tmp_h {
    bit<32>[4][4] v;
    bit<32>[4]    sa;
    bit<32>[4]    sb;
}

struct ig_metadata_t {
    bool      recirc;
    bit<9>    rnd_port_for_recirc;
    bit<1>    rnd_bit;
    aes_tmp_h aes_tmp;
}

struct eg_metadata_t {
}

parser TofinoIngressParser(packet_in pkt, inout ig_metadata_t ig_md, out ingress_intrinsic_metadata_t ig_intr_md) {
    state start {
        pkt.extract(ig_intr_md);
    }
    state parse_resubmit {
        pkt.advance(64);
    }
    state parse_port_metadata {
        pkt.advance(64);
    }
    start >(ig_intr_md.resubmit_flag)> { 0: parse_port_metadata; 1: parse_resubmit; } >> accept;
}

parser SwitchIngressParser(packet_in pkt, out header_t hdr, out ig_metadata_t ig_md, out ingress_intrinsic_metadata_t ig_intr_md) {
    TofinoIngressParser() tofino_parser;
    state start {
        tofino_parser.apply(pkt, ig_md, ig_intr_md);
    }
    state parse_ethernet {
        pkt.extract(hdr.ethernet);
    }
    state parse_ipv4 {
        pkt.extract(hdr.ipv4);
    }
    state parse_tcp {
        pkt.extract(hdr.tcp);
    }
    state parse_udp {
        pkt.extract(hdr.udp);
    }
    state parse_aes {
        pkt.extract(hdr.aes);
    }
    state parse_aes_and_meta {
        pkt.extract(hdr.aes);
        pkt.extract(hdr.aes_meta);
    }
    start >> parse_ethernet >(hdr.ethernet.ether_type)> { ETHERTYPES[0]: parse_ipv4; default: reject; }
    parse_ipv4 >(hdr.ipv4.protocol)> { IP_PROTOCOLS[1]: parse_tcp; IP_PROTOCOLS[2]: parse_udp; default: accept; }
    parse_udp >(hdr.udp.dst_port)> { 5555: parse_aes; 5555 + 1: parse_aes_and_meta; default: accept; }
    (parse_tcp, parse_aes, parse_aes_and_meta) >> accept;
}

deparser SwitchIngressDeparser(packet_out pkt, inout header_t hdr, in ig_metadata_t ig_md, in ingress_intrinsic_metadata_for_deparser_t ig_intr_dprsr_md) {
    Checksum() ipv4_checksum;
    apply {
        hdr.ipv4.hdr_checksum = ipv4_checksum.update({ hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.total_len, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.frag_offset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.src_addr, hdr.ipv4.dst_addr });
        pkt.emit(hdr);
    }
}

parser SwitchEgressParser(packet_in pkt, out header_t hdr, out eg_metadata_t eg_md, out egress_intrinsic_metadata_t eg_intr_md) {
    state start {
        pkt.extract(eg_intr_md);
    }
    start >> accept;
}

deparser SwitchEgressDeparser(packet_out pkt, inout header_t hdr, in eg_metadata_t eg_md, in egress_intrinsic_metadata_for_deparser_t eg_intr_md_for_dprsr) {
    apply {
    }
}

control SwitchIngress(inout header_t hdr, inout ig_metadata_t ig_md, in ingress_intrinsic_metadata_t ig_intr_md, in ingress_intrinsic_metadata_from_parser_t ig_intr_prsr_md, inout ingress_intrinsic_metadata_for_deparser_t ig_intr_dprsr_md, inout ingress_intrinsic_metadata_for_tm_t ig_intr_tm_md) {
    action drop() {
        ig_intr_dprsr_md.drop_ctl = 0x1;
    }
    action nop() {
    }
    action reflect() {
        ig_intr_tm_md.ucast_egress_port = ig_intr_md.ingress_port;
    }
    action route_to(bit<9> port) {
        ig_intr_tm_md.ucast_egress_port = port;
    }
    Random<bit<1>>() rng;
    action get_rnd_bit() {
        ig_md.rnd_bit = rng.get();
    }
    action do_recirculate() {
        route_to(ig_md.rnd_port_for_recirc);
    }
    factory write_v_f(bit<32> aes_tmp_v) {
        action write_v(bit<32> v) {
            aes_tmp_v = v;
        }
        return write_v;
    }
    factory tb_lookup_f(bit<8> s, bit<32> v) {
        table tb_lookup {
            key = {
                s                      : exact;
                hdr.aes_meta.curr_round: exact;
            }
            size = 3600;
            actions = {
                write_v_f(v)();
            }
        }
        return tb_lookup;
    }
    factory xor_s_ini_f(int i) {
        action xor_s_ini() {
            ig_md.aes_tmp.sa[i] = ig_md.aes_tmp.v[i][0] ^ ig_md.aes_tmp.v[(i + 1) % 4][1];
            ig_md.aes_tmp.sb[i] = ig_md.aes_tmp.v[(i + 2) % 4][2] ^ ig_md.aes_tmp.v[(i + 3) % 4][3];
        }
        return xor_s_ini;
    }
    factory xor_s_fin_f(int i) {
        action xor_s_fin() {
            hdr.aes.s[i][0] = ig_md.aes_tmp.sa[i][31:24] ^ ig_md.aes_tmp.sb[i][31:24];
            hdr.aes.s[i][1] = ig_md.aes_tmp.sa[i][23:16] ^ ig_md.aes_tmp.sb[i][23:16];
            hdr.aes.s[i][2] = ig_md.aes_tmp.sa[i][15:8] ^ ig_md.aes_tmp.sb[i][15:8];
            hdr.aes.s[i][3] = ig_md.aes_tmp.sa[i][7:0] ^ ig_md.aes_tmp.sb[i][7:0];
        }
        return xor_s_fin;
    }
    action incr_and_recirc(bit<8> next_round) {
        hdr.aes_meta.curr_round = next_round;
        do_recirculate();
        hdr.copy.setInvalid();
        hdr.udp.dst_port = 5555 + 1;
    }
    action do_not_recirc() {
        route_to((bit<9>)hdr.aes_meta.dest_port);
        hdr.udp.dst_port = 5555;
        hdr.aes_meta.setInvalid();
        hdr.copy.setValid();
        hdr.copy.copy = 0xa9204147504c7633;
        hdr.udp.udp_total_len = 8 + 16 + 8;
        hdr.ipv4.total_len = 8 + 16 + 8 + 20;
    }
    action do_not_recirc_final_xor(bit<8>[4][4] s) {
        do_not_recirc();
        for (int i in [0, 1, 2, 3]) {
            for (int j in [0, 1, 2, 3]) {
                hdr.aes.s[i][j] ^= s[i][j];
            }
        }
    }
    table tb_recirc_decision {
        key = {
            hdr.aes_meta.curr_round: exact;
        }
        actions = {
            incr_and_recirc;
            do_not_recirc;
            do_not_recirc_final_xor;
        }
        size = 20;
        default_action = do_not_recirc;
    }
    apply {
        bool is_aes = hdr.aes.isValid();
        if (!is_aes) {
            drop();
            exit;
        }
        if (!hdr.aes_meta.isValid()) {
            hdr.aes_meta.setValid();
            hdr.aes_meta.curr_round = 0;
            hdr.aes_meta.ff = 0xff;
            hdr.aes_meta.dest_port = (bit<16>)ig_intr_md.ingress_port;
            hdr.udp.checksum = 0;
        }
        get_rnd_bit();
        if (ig_md.rnd_bit == 0) {
            ig_md.rnd_port_for_recirc = 68;
        } else {
            ig_md.rnd_port_for_recirc = 68 + 128;
        }
        for (int i in [0, 1, 2, 3]) {
            for (int j in [0, 1, 2, 3]) {
                tb_lookup_f(hdr.aes.s[i][j], ig_md.aes_tmp.v[i][j]).apply();
            }
        }
        for (int i in [0, 1, 2, 3]) {
            xor_s_ini_f(i)();
            xor_s_fin_f(i)();
        }
        tb_recirc_decision.apply();
    }
}

control SwitchEgress(inout header_t hdr, inout eg_metadata_t eg_md, in egress_intrinsic_metadata_t eg_intr_md, in egress_intrinsic_metadata_from_parser_t eg_intr_md_from_prsr, inout egress_intrinsic_metadata_for_deparser_t ig_intr_dprs_md, inout egress_intrinsic_metadata_for_output_port_t eg_intr_oport_md) {
    apply {
    }
}

Pipeline(SwitchIngressParser(), SwitchIngress(), SwitchIngressDeparser(), SwitchEgressParser(), SwitchEgress(), SwitchEgressDeparser()) pipe;

Switch(pipe) main;
