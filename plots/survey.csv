Zeitstempel,How much do you like the syntax of P4 in general?,How strongly do you dislike verbose syntax constructs in P4?,How strongly do you dislike having to repeat code within one P4 project?,How strongly do you dislike having to repeat code between P4 projects?,What about the P4 syntax do you like the most?,What about the P4 syntax do you dislike the most?,How do you deal with annoyances such as those above?,How proficient do you consider yourself in programming P4?,How much would you like to see loop primitives in P4?,How much would you like to see array/list primitives in P4?,How much would you like to see object oriented concepts in P4?,How much would you like to see less verbose syntax constructs in P4?,How much would you like to see simpler recirculation/resubmit/clone handling?,How much would you like to see clearer separation between the dialects of P4?,Any comments?
19.07.2021 16:40:36,2,2,4,4,Python-style is preferred,Functions would be much better,I manually copy and paste code from one project to another,1,1,3,2,1,4,4,
19.07.2021 16:45:40,3,5,5,5,"Probably the parsers are the thing I like the most (they are quite intuitive). For the other parts, I think Python-like syntax would be better","Lack of loops (even simple bounded loops with 4-10 iterations require copying the code around, a mess to maintain)","I manually copy and paste code from one project to another, I use preprocessor macros",4,5,5,1,5,5,3,
19.07.2021 20:28:00,4,2,4,3,"I think the parser sublanguage of P4 is fairly nice, and at least a subset of it can be compiled to programmable header parsers in low cost per terabit/sec devices.",,"I use preprocessor macros, I use templating in a different programming language",5,5,5,2,4,3,3,"Note that while it is true that loops in P4 can be useful even if there are no arrays added to the language, they certainly have broader use if there are arrays."
19.07.2021 21:03:36,5,1,1,1,,,"I manually copy and paste code from one project to another, I use preprocessor macros",5,1,1,1,1,4,1,
19.07.2021 23:01:08,4,1,5,5,,,,3,5,4,2,4,2,4,
20.07.2021 07:15:50,5,4,5,5,,,"I manually copy and paste code from one project to another, I use preprocessor macros, I use templating in a different programming language",3,5,5,5,5,5,5,
20.07.2021 07:23:27,4,3,5,4,"C-style is great, and I can use C preprocessor macros myself.","some extern calls are quite unintuitive (e.g., parameter ordering, in BMV2 register read/write uses different ordering of index and value). The language spec might help encouraging a more consistent style of common extern calls...","I manually copy and paste code from one project to another, I use preprocessor macros, I use templating in a different programming language, I designed my own programming language/pre-processor",5,3,5,5,4,5,2,new user onboarding: compiling your first P4 program and run it in BMV2 is still quite a heavy-weight process. A web-based playground for testing simple P4 programs will be great.
20.07.2021 08:20:38,3,3,5,5,,,"I manually copy and paste code from one project to another, I use preprocessor macros",4,4,4,3,4,4,5,
20.07.2021 13:26:21,4,2,1,4,"short code, no long constructs","no good autocompletion, syntax highlighting, code analysis tools available",I manually copy and paste code from one project to another,4,1,1,1,1,4,1,"Two major comments:
- I think you are still looking into P4_14. The later version P4_16 is already adopted pretty well and supports some more features, such as separate deparsers.
- Many of your suggestions (loops, lists, object-oriented syntax) are taken from a functional programming language, where code is executed. P4 is a descriptive language, and is limited to simple instructions on purpose. It is what makes vendors able to map P4 into FPGAs and ASICs. Including more functionality would make compilers harder to implement, and may even limit the list of possible targets. Traditionally, SDN is plagued with some devices only implementing a subset of the intended standards, and including more features could repeat history.

In general, in this performance-sensitive topic, I'd prefer some clarity with respect to how my code is actually implemented, rather than convenience that probably cannot be compiled to my targets anyways."
20.07.2021 14:51:46,4,1,2,1,like it,"these are just details, I like the P4 syntax","I use preprocessor macros, I use templating in a different programming language",4,1,1,1,3,2,1,
20.07.2021 18:42:03,4,2,4,5,,"deparser constructions, currently we should review emit function to remove header validity evaluation.",I manually copy and paste code from one project to another,3,4,4,5,2,4,3,"I think P4 concept are very good. It is a good thing that a P4 program is finite at compilation (no loops depends on input data).
In my opinion we should keep this hard limit to allow high performance. One big modification should be to remove any redundancy into the langage.
One way would be to allow some extern function standardization with a sub language. As an example we could modify the packet.extract() into packet.read(hdr) followed by hdr.setValid(). This would allow better compiler optmization."
21.07.2021 11:26:07,4,1,3,4,"I find the parser intuitive and easy to use. The notation is not so important to me, but I prefer C-style, would definitely not like Python-style.","No particular dislike. actions is an adequate name and matches the notion if match-action tables. functions would be confusing, because there really are no functions in P4.","I manually copy and paste code from one project to another, I use preprocessor macros",3,3,2,2,2,3,1,"I see the main difficulties in how the P4 constructs map to the capabilities of a specific architecture. Many of the concepts in the questions (loops, arrays etc.) will require knowledge about how they are implemented on a given hardware, if they are even available at all. This is true even for simple arithmetic. This is what gave me the most problems in practice. Even seemingly simple assignments, e.g. in the parser, turned out to behave in an unexpected manner, for example on the Tofino ASIC. What I would find most useful is a stricter requirement for hardware to support a useful set of basic operations in a consistent manner. I fear that adding more language constructs without this will make P4 more difficult to use."
21.07.2021 16:34:32,4,3,5,2,The programming model; The way parsers are written;,,"I manually copy and paste code from one project to another, I designed my own programming language/pre-processor",4,3,3,1,2,5,2,
21.07.2021 20:07:19,3,5,5,5,,,,5,5,5,1,3,1,5,"P4 must evolve as a functional programming language. Sorry, no OO."
22.07.2021 04:26:15,4,3,5,5,,,I manually copy and paste code from one project to another,4,4,4,2,5,5,5,
22.07.2021 05:55:14,3,2,1,4,It is pretty simple and straightforward,"Indeed, actions, functions and controls have a lot of things in common, but that's not really a syntax issue. For that same reason, it is good that there are no deparsers -- if they were present in the language, they would be written as controls anyways :) It is not a syntax issue, again -- it is the question of abstractions instead.","I use preprocessor macros, I use templating in a different programming language",5,2,2,5,3,1,2,"Frankly, P4 syntax is a very small problem, compared to. the challenges of writing and compiling P4 programs for high-speed targets. In fact, the richer syntax, the more issues it creates, because it allows people to write the programs that cannot be compiled (i.e. fit) more and more easily.

Yes, it would be nice to have a statement like ""architecture v1model;"" rather than a C preprocessor #include, but in the grand scheme of things it is not a biggie.

Yes, it might be easier to have ""+="", ""-="", etc.

For the constructs register[index] the language avoids them very intentionally, because there are no registers, there are only externs and defining all kinds of operations on an abstract object is very difficult and will only complicate the language.

Yes, modularizing P4 would be nice, but so far we see that even a header library can be more detrimental than helpful, simply because to a large extent the data plane algorithm determines what constitutes a ""proper"" header definition. 

At least on the high-speed targets, the algorithms are so intertwined that it is close to impossible to combine two non-trivial algorithms by doing anything else but manual merge."
22.07.2021 16:35:31,4,1,2,3,,,I manually copy and paste code from one project to another,3,1,1,,1,4,1,
22.07.2021 17:05:31,4,2,3,4,,The deparser should be added as a reserved keyword.,I manually copy and paste code from one project to another,3,4,4,3,3,3,4,An stdlib would be a great idea and i find it a bit strange that since 2014 no such attemp has ever been made. So far only VSCode support P4 syntax highlighting.
22.07.2021 19:36:58,4,3,2,5,The parser and the status are very intuitive.,,I manually copy and paste code from one project to another,2,4,3,4,2,5,4,
23.07.2021 16:15:09,4,3,4,5,The C-style notation helped me to learn P4 more easily as I was more familiar with C than with Python. In general this might be different though.,,I manually copy and paste code from one project to another,1,4,4,4,3,4,4,
23.07.2021 18:03:51,4,4,5,4,,,"I manually copy and paste code from one project to another, I use preprocessor macros",1,3,4,5,4,2,2,
24.07.2021 05:23:18,5,4,1,1,I think the parser part is the best.,The blackboxes part in the P4-14 language.,I manually copy and paste code from one project to another,4,1,3,3,5,5,5,
27.07.2021 08:24:03,3,4,4,4,I like the current way how parsers are written.,"The deparser, at times can be confusing; apart from that, writing code to process recirculated/ cloned packets are certainly a pain.","I manually copy and paste code from one project to another, I use preprocessor macros, I use templating in a different programming language",4,3,3,,4,5,3,
29.07.2021 10:28:50,4,4,,3,like the C style notation,,I manually copy and paste code from one project to another,2,5,5,3,4,2,3,
05.08.2021 23:19:50,3,5,3,5,Python-style,No IDE that can highlight the definition of function and how can we use it.,I manually copy and paste code from one project to another,4,4,4,4,4,5,4,Want to share more.
21.08.2021 15:10:47,4,5,3,3,the packet parser,"Instead of the deparser, it is the action code that determine protocol validate&invalidate. the action should call deparser.validate/invalidate <protocol> to make it looks like that the deparser is in charge of re-packeting.","I manually copy and paste code from one project to another, I use templating in a different programming language, I make a visual editor for p4 program (on progress)",5,1,5,1,1,5,5,
21.08.2021 16:25:36,3,5,3,2,,,I manually copy and paste code from one project to another,1,3,4,4,5,5,5,
23.08.2021 20:06:51,3,2,5,5,notation for tables.,,"I manually copy and paste code from one project to another, I use preprocessor macros, I designed my own programming language/pre-processor",4,5,5,3,4,5,3,
15.09.2021 11:14:52,4,5,5,5,Fast for network processing.,can't do code reuse as well,"I manually copy and paste code from one project to another, I use preprocessor macros, I use templating in a different programming language",1,5,5,3,5,5,1,Changes shouldn't come at price of performance.